name: Deploy to EC2

on:
  pull_request:
    types: [closed]
    branches: [main]

jobs:
  deploy:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Build with Gradle
        run: |
          chmod +x ./gradlew
          ./gradlew build -x test

      - name: Copy entire project to EC2
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "."
          target: "~/TheDayOfToday-BE"
      - name: Run Blue-Green Deployment on EC2
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd ~/TheDayOfToday-BE

            # Step 0: Stop previous app_v2 if still alive
            docker stop app_v2 || true
            docker rm app_v2 || true

            # Step 1: Build new Docker image
            docker build --no-cache -t thedayoftoday-app:latest .

            # Step 2: Run new container on 8081
            docker run -d --name app_v2 -p 8081:8080 thedayoftoday-app

            # Step 3: Switch Nginx to app_v2 (8081)
            sudo ln -sf /etc/nginx/sites-available/thedayoftoday-v2 /etc/nginx/sites-enabled/
            sudo systemctl reload nginx

            # Step 4: Stop and remove old container
            docker stop app_v1 || true
            docker rm app_v1 || true

            # Step 5: Rename app_v2 → app_v1 (prepare for next deploy)
            docker rename app_v2 app_v1


            # Step 5: Rename app_v2 → app_v1 (prepare for next deploy)
            docker rename app_v2 app_v1
